#include "GEMRunAction.hh"
#include "GEMRun.hh"
#include "GEMDetectorHit.hh"

#include "G4RunManager.hh"
#include "GEMDetectorConstruction.hh"
#include "G4THitsMap.hh"
#include "G4SDManager.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"
#include "G4Run.hh"

#include <fstream>
#define _USE_MATH_DEFINES

<<<<<<< HEAD
GEMRunAction::GEMRunAction(const G4String detectorName) : G4UserRunAction()
{
    DetectorName = detectorName;
=======
GEMRunAction::GEMRunAction(const std::vector<G4String> nameVector) : G4UserRunAction()
{
//    G4UImanager* UImanager = G4UImanager::GetUIpointer();
//    DebugUISession * LoggedSession = new DebugUISession;
//    UImanager->SetCoutDestination(LoggedSession);

    NameVector = nameVector;

    ScanVertical = 0;
    ScanHorizontal = 0;

    MagField.set(0,0,0);
>>>>>>> origin

    for (int i = 0; i < 200; i++)
    {
        for (int j = 0; j < 200; j++)
            Cells[i][j] = 0;
    }
}

GEMRunAction::~GEMRunAction()
{}

G4Run* GEMRunAction::GenerateRun()
{
<<<<<<< HEAD
  return new GEMRun(DetectorName, 0);
=======
    return new GEMRun(NameVector, 0);
>>>>>>> origin
}

void GEMRunAction::BeginOfRunAction(const G4Run* aRun)
{
    G4cout << "### Run " << aRun->GetRunID() << " start." << G4endl;
}

void GEMRunAction::EndOfRunAction(const G4Run* aRun)
{
    if(!IsMaster()) return;

<<<<<<< HEAD
    GEMRun *GEMRun = (GEMRun*)aRun;
    for (int i = 0; i < 200; i++)
=======
    G4int hitNum1 = gemRun->GetNumberOfHits("DepthDetector");
    G4cout << "Hits in DepthDetector = " << hitNum1 << G4endl;
    for (G4int i = 0; i < hitNum1; i++)
    {
        GEMDetectorHit* hit = (GEMDetectorHit*)(gemRun->GetHit("DepthDetector", i));
        if(hit != NULL)
        {
            G4int j = hit->GetPos()[0];
            Depth[j] = Depth[j]+hit->GetEdep();
        }
    }

    if (ScanHorizontal >= 7)
    {
        std::ofstream depthFile("GEMDepthMT.txt");
        for (G4int i = 0; i < 100; i++)
            depthFile << i*22.0/100.0 << " " << Depth[i]/Depth[0] << "\n";
    }

    // Here is the temporary code for determining the distance between the points
    G4int hitNum = gemRun->GetNumberOfHits("ProfileDetectorIso");
    G4String detectorName = "ProfileDetectorIso";
    G4cout << "Hits in ProfileDetectorIso = " << hitNum << G4endl;

    for (G4int i = 0; i < hitNum; i++)
    {
        GEMDetectorHit* hit = (GEMDetectorHit*)(gemRun->GetHit(detectorName, i));

        if(hit != NULL)
        {
            G4int j = hit->GetPos()[0];
            G4int k = hit->GetPos()[1];
            Cells3[j][k] = Cells3[j][k]+hit->GetEdep();
        }
    }

    G4double max = 0;
    G4int maxi = 0;
    G4int maxj = 0;

    for (G4int i = 0; i < 100; i++)
>>>>>>> origin
    {
        for (int j = 0; j < 200; j++)
            Cells[i][j] += GEMRun->GetCells()[i][j];
    }

    std::ofstream mapFile("GEMUrban15.txt");

    for (G4int xBox = 0; xBox <= 200; xBox++)
    {
        mapFile << "\n";

        // bloody gnuplot!
        for (G4int yBox = 0; yBox <= 200; yBox++)
        {
            if ((yBox == 200)||(xBox == 200))
            {
                mapFile << (G4double)(xBox*6.0)/200.0 << " " << (G4double)(yBox*6.0/200.0) << " 0 \n";
            }
            else
                mapFile << (G4double)(xBox*6.0)/200.0 << " " << (G4double)(yBox*6.0/200.0) << " " << Cells[yBox][xBox] << " \n";
        }
    }  
}
